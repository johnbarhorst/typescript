{"version":3,"sources":["index.ts"],"names":["isOpen","firstName","age","numArray","tuple","Job","job","WebDeveloper","smorgasbord","profile","name","phone","lastName","doppleganger","changeable","unionChangeable","typedFunction","string","console","log","length","typedDefaultValue","ageReport","stringNullUndefined","undefined","shoutOutDog","_a","returnDogStuff","EnergyType","Solar","useEnergyType","contentType","StringEnergyTypes","useStringEnergy","energy","None"],"mappings":"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","file":"typescript.84eaec6e.map","sourceRoot":"..","sourcesContent":["var isOpen = false;\nvar firstName = 'John';\nvar age = 38;\n// add [] to the end of a type for arrays of one type\nvar numArray = [1, 2, 3, 4, 5];\n// order matters here\nvar tuple = ['string', 10];\n// set an enum\nvar Job;\n(function (Job) {\n    Job[Job[\"WebDeveloper\"] = 0] = \"WebDeveloper\";\n    Job[Job[\"DeliveryDriver\"] = 1] = \"DeliveryDriver\";\n})(Job || (Job = {}));\nvar job = Job.WebDeveloper;\n// ANYTHING GOES!\nvar smorgasbord = 'anything';\n// object\nvar profile = {\n    name: 'John Barhorst',\n    phone: 6515552525,\n};\n// Variable variables and implicit types\nvar lastName = 'Barhorst';\nlastName = 'Anastasi';\n// TS knows the original was a string, so if you later try to assign it as a number\n// there will be an error.\n// lastName = 34; <-- causes an error, because original declaration was as a string.\n// Types can be inherited, no need to declare it here.\nvar doppleganger = lastName;\n// doppleganger = 34;  <-- would cause an error, since lastName is an implicit string.\n// IF YOU MUST ALLOW A VARIABLE TO CHANGE TYPE! (Pro tip, probably don't)\n// Use type of any\nvar changeable = 'Steven McBadCode';\nchangeable = 69;\n// Even better, set Union types\nvar unionChangeable = 'Jimmy VonBetterOption';\nunionChangeable = 42;\nunionChangeable = true;\n//Functions \n// Set argument type in paramaters, \n// and set the return type after paramaters.\n// ? indicates optional paramater.\nvar typedFunction = function (string) {\n    console.log(string);\n    return string.length;\n};\n// Typescript recognizes the type of a default paramater, no need to declare it.\nvar typedDefaultValue = function (string) {\n    if (string === void 0) { string = 'Greetings!'; }\n    console.log(string);\n};\n// Union types as paramaters/arguments\n// can take multiple types of input\nvar ageReport = function (age) {\n    return \"Subject is \" + age + \" years old\";\n};\n// Null\n// Strings. Strings can be null or undefined.\nvar stringNullUndefined = 'STRING!';\nstringNullUndefined = null; // No problem\nstringNullUndefined = undefined; // Go right ahead, I guess.\nvar shoutOutDog = function (_a) {\n    var name = _a.name, age = _a.age;\n    console.log(\"Hey \" + name + \"! You're \" + age + \"!\");\n    return name;\n};\n// Now arguments can be passed in any order!\nshoutOutDog({\n    name: 'Veyda',\n    age: 12\n});\n// Can be used as the return types as well.\nvar returnDogStuff = function (_a) {\n    var name = _a.name, age = _a.age;\n    return { name: name, age: age };\n};\n// ENUMS\n// Numeric Enum\n// Using Numeric Enum returns a number.\nvar EnergyType;\n(function (EnergyType) {\n    EnergyType[EnergyType[\"None\"] = 0] = \"None\";\n    EnergyType[EnergyType[\"Arc\"] = 1] = \"Arc\";\n    EnergyType[EnergyType[\"Solar\"] = 2] = \"Solar\";\n    EnergyType[EnergyType[\"Void\"] = 3] = \"Void\"; // 3\n})(EnergyType || (EnergyType = {}));\nconsole.log(EnergyType.Solar); // Logs 2\n// contentType is just the paramater name, does not have to be specifically used like this.\nvar useEnergyType = function (contentType) {\n    console.log(contentType);\n    return contentType;\n};\nuseEnergyType(EnergyType.Solar); // Logs 2\nuseEnergyType(2); // Also logs 2, not Solar\n// String Enum\n// Standard is all caps. Can then use methods to get into the case you want/\nvar StringEnergyTypes;\n(function (StringEnergyTypes) {\n    StringEnergyTypes[\"None\"] = \"NONE\";\n    StringEnergyTypes[\"Arc\"] = \"ARC\";\n    StringEnergyTypes[\"Solar\"] = \"SOLAR\";\n    StringEnergyTypes[\"Void\"] = \"VOID\";\n})(StringEnergyTypes || (StringEnergyTypes = {}));\nvar useStringEnergy = function (energy) {\n    console.log(energy);\n    return energy;\n};\nuseStringEnergy(StringEnergyTypes.None);\n// useStringEnergy('NONE'); This doesn't work like it does with number enums\n//  useStringEnergy(1); Nor does this.\n"]}