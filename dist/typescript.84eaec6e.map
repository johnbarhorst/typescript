{"version":3,"sources":["index.ts"],"names":["isOpen","firstName","age","numArray","tuple","Job","job","WebDeveloper","smorgasbord","profile","name","phone","lastName","doppleganger","changeable","unionChangeable","typedFunction","string","console","log","length","typedDefaultValue"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAIA,SAAS,KAAb;AACA,IAAIC,YAAY,MAAhB;AACA,IAAIC,MAAM,EAAV;AACA;AACA,IAAIC,WAAW,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAf;AACA;AACA,IAAIC,QAAQ,CAAC,QAAD,EAAW,EAAX,CAAZ;AACA;AACA,IAAIC,GAAJ;AACA,CAAC,UAAUA,GAAV,EAAe;AACZA,QAAIA,IAAI,cAAJ,IAAsB,CAA1B,IAA+B,cAA/B;AACAA,QAAIA,IAAI,gBAAJ,IAAwB,CAA5B,IAAiC,gBAAjC;AACH,CAHD,EAGGA,QAAQA,MAAM,EAAd,CAHH;AAIA,IAAIC,MAAMD,IAAIE,YAAd;AACA;AACA,IAAIC,cAAc,UAAlB;AACA;AACA,IAAIC,UAAU;AACVC,UAAM,eADI;AAEVC,WAAO;AAFG,CAAd;AAIA;AACA,IAAIC,WAAW,UAAf;AACAA,WAAW,UAAX;AACA;AACA;AACA;AACA;AACA,IAAIC,eAAeD,QAAnB;AACA;AACA;AACA;AACA,IAAIE,aAAa,kBAAjB;AACAA,aAAa,EAAb;AACA;AACA,IAAIC,kBAAkB,uBAAtB;AACAA,kBAAkB,EAAlB;AACAA,kBAAkB,IAAlB;AACA;AACA;AACA;AACA;AACA,IAAIC,gBAAgB,SAAhBA,aAAgB,CAAUC,MAAV,EAAkB;AAClCC,YAAQC,GAAR,CAAYF,MAAZ;AACA,WAAOA,OAAOG,MAAd;AACH,CAHD;AAIA;AACA,IAAIC,oBAAoB,SAApBA,iBAAoB,CAAUJ,MAAV,EAAkB;AACtC,QAAIA,WAAW,KAAK,CAApB,EAAuB;AAAEA,iBAAS,YAAT;AAAwB;AACjDC,YAAQC,GAAR,CAAYF,MAAZ;AACH,CAHD","file":"typescript.84eaec6e.map","sourceRoot":"..","sourcesContent":["var isOpen = false;\nvar firstName = 'John';\nvar age = 38;\n// add [] to the end of a type for arrays of one type\nvar numArray = [1, 2, 3, 4, 5];\n// order matters here\nvar tuple = ['string', 10];\n// set an enum\nvar Job;\n(function (Job) {\n    Job[Job[\"WebDeveloper\"] = 0] = \"WebDeveloper\";\n    Job[Job[\"DeliveryDriver\"] = 1] = \"DeliveryDriver\";\n})(Job || (Job = {}));\nvar job = Job.WebDeveloper;\n// ANYTHING GOES!\nvar smorgasbord = 'anything';\n// object\nvar profile = {\n    name: 'John Barhorst',\n    phone: 6515552525,\n};\n// Variable variables and implicit types\nvar lastName = 'Barhorst';\nlastName = 'Anastasi';\n// TS knows the original was a string, so if you later try to assign it as a number\n// there will be an error.\n// lastName = 34;\n// Types can be inherited, no need to declare it here.\nvar doppleganger = lastName;\n// doppleganger = 34;  <-- would cause an error, since lastName is an implicit string.\n// IF YOU MUST ALLOW A VARIABLE TO CHANGE TYPE! (Pro tip, probably don't)\n// Use type of any\nvar changeable = 'Steven McBadCode';\nchangeable = 69;\n// Even better, set Union types\nvar unionChangeable = 'Jimmy VonBetterOption';\nunionChangeable = 42;\nunionChangeable = true;\n//Functions \n// Set argument type in paramaters, \n// and set the return type after paramaters.\n// ? indicates optional paramater.\nvar typedFunction = function (string) {\n    console.log(string);\n    return string.length;\n};\n// Typescript recognizes the type of a default paramater, no need to declare it.\nvar typedDefaultValue = function (string) {\n    if (string === void 0) { string = 'Greetings!'; }\n    console.log(string);\n};\n"]}